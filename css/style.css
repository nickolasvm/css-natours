@charset "UTF-8";
/* basic reset */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /* changes the box model so the margin or padding dont change the total width or height */
  box-sizing: inherit; }

/* 
setting the font size on the html (root)
so we can use rem units to size our stuff
setting it to 10px means that
1rem = 10px

the problem with setting the root font size is that
a user that want tochange it has no way of doing it
that's why isntead of setting a fized font size of 10px
we use a percentage of the default browser font size (16px)
to ake our root font size 10px
thats why we use 62.5%
*/
html {
  font-size: 62.5%; }

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /* font-size: 16px; */
  list-style: 1.7;
  color: #777;
  /* 
    by setting up our root font size to 10px
    to have the same effect here as 30px padding
    we can change it to 3rem = 30px
    */
  padding: 3rem;
  box-sizing: border-box; }

.header {
  position: relative;
  height: 95vh;
  /* 2 bg's, one on top of other, and graident with 2 colors and position */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url(../img/hero.jpg);
  /* cover always try to fit inside the box */
  background-size: cover;
  /* size makes that whenever the image needs to be cropped, the top part always stays on, and can be bottom and center also */
  background-position: top;
  /* faz um clip de visibilidade baseado na função poligono que recebe como parametros coordenadas
    polygon also can be a lot of forms
    bennetfeely.com/clippy/
    . polygon(quadrante top left, top right, bottom right, bottom left)
    . polygon(xy, xy ,xy ,xy)
    */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%); }

/* to position absolute to work, it's starting point its the parente elemente with position relative */
.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem; }

.header__logo {
  height: 3.5rem; }

/* 
using 50% of the left, trhow the START of the div to left, making it look off
. to make it work, use trasnform trasnlate fucntion, with x y params
top and left are relatives to parent element, while translate is relative to the element itself
*/
.header__text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center; }

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  margin-bottom: 6rem;
  /* 
    backface is like, imagine we roate the child element 180
    using transform
    we would see the background div parent element
    we dont want that
    */
  backface-visibility: hidden; }

/* whe display both as block, because block occupy the entire width avalible to them, forcing them to another line */
.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;
  /* to add the animation we just created */
  animation-name: moveInLeft;
  animation-duration: 1s;
  animation-timing-function: ease-out;
  /* 
    animation-delay: 3s;
    animation-iteration-count: 3;
    animation-timing-function: ease-in;
    */ }

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.75rem;
  animation: moveInRight 1s ease-out; }

/* 
to make animations
@keyframes name-of-animation {
    0% (or start)
    n% (middle)
    100% (or finish)
*/
@keyframes moveInLeft {
  0% {
    /* to make it invisible */
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    /* trasnlate 0 para manter a forma original */
    transform: translateX(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  100% {
    opacity: 1;
    transform: translateY(0); } }

/* 
link is pseudo class
used to style elemenets under specials conditions

inline-block element is treated as text
*/
.btn:link,
.btn:visited {
  font-size: 1.6rem;
  position: relative;
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 10rem;
  /* 
    trasistion is like an easier compact way of animating stuff
    selectng all to amke all the attributes related to the transitioning
    */
  transition: all .2s; }

.btn:hover {
  transform: translateY(-0.3rem);
  box-shadow: 0 1rem 2rem rgba(0, 0, 0, 0.2); }

.btn:active {
  transform: translateY(-0.1rem);
  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.2); }

.btn--white {
  background-color: #fff;
  color: #777; }

/* 
::after pseudo element adds a virtual element right after the element
this pseudo elelment is basically tretaed like a child to the actual element
using position absolute here, it will serahc for the next parent with relative positiooning
so, we add this to its close parent, or else it will be far away than intended

z-index changes the positions of elements if they are on top of one another
*/
.btn::after {
  content: "";
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 10rem;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all .4s; }

.btn--white::after {
  background-color: #fff; }

/* 
scale changes the size of the element
*/
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0; }

/* 
animation-fill-mode basically make that the styles of the start of the animation already is applied even if there is a delay

without it, the button show up normally, THEN animate, making it look weird
*/
.btn--animated {
  animation: moveInBottom .5s ease-out .75s;
  animation-fill-mode: backwards; }
